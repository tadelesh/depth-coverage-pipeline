steps:
- template: ../PrepareSDKCodeEnv.yml
- bash: |
    export GOPATH=/home/vsts/work/1/s/go
    export GOROOT=/home/vsts/work/1/s/go/bin
    if [ ! -d "$GOPATH/bin" ]; then
      mkdir $GOPATH/bin
    fi
    export PATH=$PATH:$GOPATH/bin
    export GO111MODULE=on
    cd $(Pipeline.Workspace)/s/azure-sdk-for-go/tools/generator && go build && cp generator $GOPATH/bin
  displayName: 'setup Go environment'
- bash: |
    pwd
    ls -l

    autorestConfigFile=$(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.go.md
    modules=grep -i "module-name:\s" "$autorestConfigFile"
    for (( i=1; i<${#modules[@]}; i+=2 ));
    do
      sep=(${modules[$i]//// })
      if [ $i -eq 1 ]; then
        rpAndPackages="${sep[1]} ${sep[2]//$'\r'}"
      else
        rpAndPackages="$rpAndPackages ${sep[2]//$'\r'}"
      fi
    done
    
    echo "RP name and packages' namd: $rpAndPackages"
    echo "##vso[task.setvariable variable=rpAndPackages]$rpAndPackages"
    
    if [ "$?" != "0" ]; then
      echo "failed to generate readme config file"
      echo "##vso[task.setvariable variable=Task_Result]failure"
    else
      echo "readme config file generated"
      cd $(Pipeline.Workspace)/s/azure-rest-api-specs
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Get RP and package name'
- bash: |
    set -x
    pwd
    ls -l

    rpAndPackages=($(rpAndPackages))
    for (( i=1; i<${#rpAndPackages[@]}; i++ ));
    do
      generator release-v2 $(Pipeline.Workspace)/s/azure-sdk-for-go $(Pipeline.Workspace)/s/azure-rest-api-specs ${rpAndPackages[0]} ${rpAndPackages[$i]} --create-branch=false

      if [ "$?" != "0" ]; then
        echo -e "\e[31m[$(date -u)] ERROR: [$OPERATION : $(ResourceProvider)]: Generate go sdk failed"
        az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
        az storage blob upload -c depthcoverage -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
        echo "##vso[task.setvariable variable=Task_Result]failure"
        exit 1
      fi
    done
  displayName: "Generate Go-sdk"
- bash: |
    set -x

    rpAndPackages=($(rpAndPackages))
    for (( i=1; i<${#rpAndPackages[@]}; i++ ));
    do
      moduleName="sdk/${rpAndPackages[0]}/${rpAndPackages[$i]}"
      goSDKFolder="$(Pipeline.Workspace)/s/azure-sdk-for-go"
      outputFolder="$goSDKFolder/$moduleName"
      autorestTestPackageURL="https://amecodegenstorage.blob.core.windows.net/tools/autorest-tests-0.1.0-preview.tgz"
      autorestGoVersion="@autorest/go@4.0.0-preview.27"
      autorest --version=3.2.1 --use=$autorestGoVersion --use=$autorestTestPackageURL --file-prefix="zz_generated_" --track2 --go --output-folder=$outputFolder --clear-output-folder=false --go.clear-output-folder=false --tests.generate-mock-test --generate-sdk=false 1>>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1

      if [ "$?" != "0" ]; then
        echo -e "\e[31m[$(date -u)] ERROR: [$OPERATION : $(ResourceProvider)]: Generate go sdk mock test failed"
        az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
        az storage blob upload -c depthcoverage -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
        echo "##vso[task.setvariable variable=Task_Result]failure"
        exit 1
      fi
    done
  displayName: 'Generate Mock Test case'
- bash: |
    cd $(Pipeline.Workspace)/s/azure-sdk-for-go
    echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
    git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3"
    git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
  displayName: 'submit code'